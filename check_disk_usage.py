#!/usr/bin/env python3
"""
Script para verificar el uso de disco del sistema de procesamiento de audio
"""

import os
import sys
import argparse
from datetime import datetime

# Agregar el directorio actual al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from audio_processor import AudioProcessor, StructuredLogger
from config import Config

def format_size(size_bytes):
    """Convierte bytes a formato legible"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1
    
    return f"{size_bytes:.2f} {size_names[i]}"

def check_disk_usage(args):
    """Verifica el uso de disco del sistema"""
    logger = StructuredLogger(__name__)
    config = Config()
    
    try:
        # Crear instancia del procesador
        processor = AudioProcessor(config)
        
        # Obtener informaci√≥n de uso de disco
        usage_info = processor.get_disk_usage()
        
        if not usage_info:
            logger.error("No se pudo obtener informaci√≥n de uso de disco")
            return
        
        # Mostrar informaci√≥n general
        logger.info("üìä Informaci√≥n de Uso de Disco")
        print(f"\n{'='*60}")
        print(f"üìÅ USO DE DISCO - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"{'='*60}")
        
        # Informaci√≥n de audios
        print(f"\nüéµ AUDIOS:")
        print(f"  üìä Tama√±o: {usage_info.get('audio_size_mb', 0):.2f} MB")
        print(f"  üìÑ Archivos: {usage_info.get('audio_files', 0)}")
        print(f"  üìç Directorio: {config.AUDIO_DOWNLOAD_PATH}")
        
        # Informaci√≥n de transcripciones
        print(f"\nüìù TRANSCRIPCIONES:")
        print(f"  üìä Tama√±o: {usage_info.get('text_size_mb', 0):.2f} MB")
        print(f"  üìÑ Archivos: {usage_info.get('text_files', 0)}")
        print(f"  üìç Directorio: {config.TEXT_OUTPUT_PATH}")
        
        # Total
        print(f"\nüíæ TOTAL:")
        print(f"  üìä Tama√±o Total: {usage_info.get('total_size_mb', 0):.2f} MB")
        print(f"  üìÑ Archivos Total: {usage_info.get('total_files', 0)}")
        
        # Configuraci√≥n de limpieza
        print(f"\nüßπ CONFIGURACI√ìN DE LIMPIEZA:")
        print(f"  üîÑ Limpieza Autom√°tica: {'‚úÖ Habilitada' if config.AUTO_CLEANUP else '‚ùå Deshabilitada'}")
        print(f"  üéµ Limpiar Audios: {'‚úÖ S√≠' if config.CLEANUP_AUDIO_FILES else '‚ùå No'}")
        print(f"  üóëÔ∏è  Limpiar Temporales: {'‚úÖ S√≠' if config.CLEANUP_TEMP_FILES else '‚ùå No'}")
        print(f"  üìù Mantener Transcripciones: {'‚úÖ S√≠' if config.KEEP_TRANSCRIPTS else '‚ùå No'}")
        print(f"  ‚è±Ô∏è  Delay de Limpieza: {config.CLEANUP_DELAY}s")
        
        # Recomendaciones
        print(f"\nüí° RECOMENDACIONES:")
        total_size_mb = usage_info.get('total_size_mb', 0)
        
        if total_size_mb > 1000:  # M√°s de 1GB
            print(f"  ‚ö†Ô∏è  Uso alto de disco ({total_size_mb:.2f} MB)")
            print(f"  üîß Considera habilitar limpieza autom√°tica")
            print(f"  üóëÔ∏è  Revisa archivos antiguos que se puedan eliminar")
        elif total_size_mb > 500:  # M√°s de 500MB
            print(f"  ‚ö° Uso moderado de disco ({total_size_mb:.2f} MB)")
            print(f"  üîß La limpieza autom√°tica est√° funcionando bien")
        else:
            print(f"  ‚úÖ Uso bajo de disco ({total_size_mb:.2f} MB)")
            print(f"  üéâ Sistema optimizado")
        
        # Verificar directorios espec√≠ficos si se solicita
        if args.detailed:
            print(f"\nüîç AN√ÅLISIS DETALLADO:")
            
            # Analizar directorio de audios
            if os.path.exists(config.AUDIO_DOWNLOAD_PATH):
                print(f"\nüìÅ Audios por fecha:")
                for year in sorted(os.listdir(config.AUDIO_DOWNLOAD_PATH)):
                    year_path = os.path.join(config.AUDIO_DOWNLOAD_PATH, year)
                    if os.path.isdir(year_path):
                        year_size = processor._get_directory_size(year_path)
                        year_files = processor._count_files(year_path)
                        print(f"  üìÖ {year}: {format_size(year_size)} ({year_files} archivos)")
            
            # Analizar directorio de transcripciones
            if os.path.exists(config.TEXT_OUTPUT_PATH):
                print(f"\nüìÅ Transcripciones por fecha:")
                for year in sorted(os.listdir(config.TEXT_OUTPUT_PATH)):
                    year_path = os.path.join(config.TEXT_OUTPUT_PATH, year)
                    if os.path.isdir(year_path):
                        year_size = processor._get_directory_size(year_path)
                        year_files = processor._count_files(year_path)
                        print(f"  üìÖ {year}: {format_size(year_size)} ({year_files} archivos)")
        
        print(f"\n{'='*60}")
        
    except Exception as e:
        logger.error("Error verificando uso de disco", details=f"Error: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Verificar uso de disco del sistema de procesamiento")
    parser.add_argument("--detailed", action="store_true", help="Mostrar an√°lisis detallado por fecha")
    parser.add_argument("--path", type=str, help="Ruta espec√≠fica a analizar")
    
    args = parser.parse_args()
    sys.exit(check_disk_usage(args))
