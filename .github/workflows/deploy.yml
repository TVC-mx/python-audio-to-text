name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Get VM IP
      id: get-vm-ip
      run: |
        VM_IP=$(az vm show \
          --resource-group python-audio-to-text-rg \
          --name audio-transcription-vm \
          --show-details \
          --query publicIps \
          --output tsv)
        echo "vm-ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "VM IP: $VM_IP"
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Deploy to VM
      run: |
        # Crear directorio temporal para archivos
        mkdir -p /tmp/deploy
        
        # Copiar archivos necesarios
        cp -r . /tmp/deploy/
        cd /tmp/deploy
        
        # Crear script de deploy
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Iniciando deploy en VM..."
        
        # Detener contenedores existentes
        echo "🛑 Deteniendo contenedores existentes..."
        docker-compose -f azure-gpu-optimized.yml down || true
        
        # Limpiar imágenes antiguas
        echo "🧹 Limpiando imágenes antiguas..."
        docker system prune -f || true
        
        # Clonar/actualizar repositorio
        echo "📥 Actualizando código..."
        if [ -d "python-audio-to-text" ]; then
          cd python-audio-to-text
          git pull origin main
        else
          git clone https://github.com/TVC-mx/python-audio-to-text.git
          cd python-audio-to-text
        fi
        
        # Verificar que .env existe
        if [ ! -f ".env" ]; then
          echo "⚠️ Archivo .env no encontrado, copiando desde env.example..."
          cp env.example .env
          echo "📝 Por favor, configura las variables de entorno en .env"
        fi
        
        # Crear directorios necesarios
        mkdir -p audios textos logs
        
        # Construir y ejecutar con GPU
        echo "🐳 Construyendo y ejecutando con GPU..."
        docker-compose -f azure-gpu-optimized.yml up --build -d
        
        # Verificar que el contenedor está corriendo
        echo "✅ Verificando estado del contenedor..."
        docker ps
        
        echo "🎉 Deploy completado exitosamente!"
        EOF
        
        chmod +x deploy.sh
        
        # Ejecutar deploy en la VM
        scp -o StrictHostKeyChecking=no -r /tmp/deploy/* azureuser@${{ steps.get-vm-ip.outputs.vm-ip }}:/home/azureuser/
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-ip.outputs.vm-ip }} "cd /home/azureuser && ./deploy.sh"
    
    - name: Verify deployment
      run: |
        echo "🔍 Verificando deploy..."
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-ip.outputs.vm-ip }} "
          echo '📊 Estado del sistema:'
          docker ps
          echo ''
          echo '🎮 Estado GPU:'
          nvidia-smi --query-gpu=utilization.gpu,memory.used,memory.total --format=csv,noheader,nounits || echo 'GPU no disponible'
          echo ''
          echo '💾 Uso de memoria:'
          free -h
        "
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deploy exitoso!"
        else
          echo "❌ Deploy falló!"
        fi
