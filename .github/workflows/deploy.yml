name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Get VM and Key Vault Info
      id: get-vm-info
      run: |
        echo "🔍 Obteniendo información completa de VM y recursos..."
        
        # Buscar VM que coincida con el patrón tvc-audio2text-*-vm-* en toda la suscripción
        VM_INFO=$(az vm list \
          --query "[?contains(name, 'tvc-audio2text') && contains(name, 'vm')]" \
          --output json | jq '.[0]')
        
        if [ "$VM_INFO" = "null" ] || [ -z "$VM_INFO" ]; then
          echo "❌ No se encontró VM con patrón tvc-audio2text-*-vm-*"
          exit 1
        fi
        
        # Extraer información de la VM
        VM_NAME=$(echo "$VM_INFO" | jq -r '.name')
        RESOURCE_GROUP=$(echo "$VM_INFO" | jq -r '.resourceGroup')
        LOCATION=$(echo "$VM_INFO" | jq -r '.location')
        
        echo "🔍 VM encontrada: $VM_NAME"
        echo "📦 Grupo de recursos: $RESOURCE_GROUP"
        echo "📍 Ubicación: $LOCATION"
        
        # Obtener IP de la VM
        VM_IP=$(az vm show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$VM_NAME" \
          --show-details \
          --query publicIps \
          --output tsv)
        
        # Buscar Key Vault en el mismo grupo de recursos
        KEY_VAULT_NAME=$(az keyvault list \
          --resource-group "$RESOURCE_GROUP" \
          --query "[0].name" \
          --output tsv)
        
        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "❌ No se encontró Key Vault en el grupo de recursos: $RESOURCE_GROUP"
          exit 1
        fi
        
        echo "🔑 Key Vault encontrado: $KEY_VAULT_NAME"
        
        # Guardar variables de salida
        echo "vm-ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "vm-name=$VM_NAME" >> $GITHUB_OUTPUT
        echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        echo "location=$LOCATION" >> $GITHUB_OUTPUT
        echo "key-vault-name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
        echo "VM IP: $VM_IP"
        echo "Key Vault: $KEY_VAULT_NAME"
    
    - name: Get SSH Key from Key Vault
      id: get-ssh-key
      run: |
        echo "🔑 Obteniendo clave SSH desde Key Vault..."
        
        # Obtener clave privada desde Key Vault usando la información detectada
        SSH_PRIVATE_KEY=$(az keyvault secret show \
          --vault-name ${{ steps.get-vm-info.outputs.key-vault-name }} \
          --name ${{ secrets.SSH_KEY_SECRET_NAME }} \
          --query value \
          --output tsv)
        
        # Guardar en variable de salida
        echo "ssh-private-key=$SSH_PRIVATE_KEY" >> $GITHUB_OUTPUT
        
        echo "✅ Clave SSH obtenida desde Key Vault: ${{ steps.get-vm-info.outputs.key-vault-name }}"
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ steps.get-ssh-key.outputs.ssh-private-key }}
    
    - name: Deploy to VM
      run: |
        echo "🚀 Desplegando a VM usando clave de Terraform/Key Vault..."
        
        # Crear script de deploy
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Iniciando deploy en VM..."
        
        # Detener contenedores existentes
        echo "🛑 Deteniendo contenedores existentes..."
        docker-compose -f azure-gpu-optimized.yml down || true
        
        # Limpiar imágenes antiguas
        echo "🧹 Limpiando imágenes antiguas..."
        docker system prune -f || true
        
        # Clonar/actualizar repositorio
        echo "📥 Actualizando código..."
        if [ -d "python-audio-to-text" ]; then
          cd python-audio-to-text
          git pull origin main
        else
          git clone https://github.com/TVC-mx/python-audio-to-text.git
          cd python-audio-to-text
        fi
        
        # Verificar que .env existe
        if [ ! -f ".env" ]; then
          echo "⚠️ Archivo .env no encontrado, copiando desde env.example..."
          cp env.example .env
          echo "📝 Por favor, configura las variables de entorno en .env"
        fi
        
        # Crear directorios necesarios
        mkdir -p audios textos logs
        
        # Construir y ejecutar con GPU
        echo "🐳 Construyendo y ejecutando con GPU..."
        docker-compose -f azure-gpu-optimized.yml up --build -d
        
        # Verificar que el contenedor está corriendo
        echo "✅ Verificando estado del contenedor..."
        docker ps
        
        echo "🎉 Deploy completado exitosamente!"
        EOF
        
        chmod +x deploy.sh
        
        # Ejecutar deploy en la VM
        echo "🚀 Desplegando a VM: ${{ steps.get-vm-info.outputs.vm-name }}"
        scp -o StrictHostKeyChecking=no deploy.sh azureuser@${{ steps.get-vm-info.outputs.vm-ip }}:/home/azureuser/
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-info.outputs.vm-ip }} "cd /home/azureuser && ./deploy.sh"
    
    - name: Verify deployment
      run: |
        echo "🔍 Verificando deploy..."
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-info.outputs.vm-ip }} "
          echo '📊 Estado del sistema:'
          docker ps
          echo ''
          echo '🎮 Estado GPU:'
          nvidia-smi --query-gpu=utilization.gpu,memory.used,memory.total --format=csv,noheader,nounits || echo 'GPU no disponible'
          echo ''
          echo '💾 Uso de memoria:'
          free -h
        "
