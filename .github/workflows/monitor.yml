name: Monitor Azure VM

on:
  schedule:
    - cron: '0 */6 * * *'  # Cada 6 horas
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Get VM IP
      id: get-vm-ip
      run: |
        VM_IP=$(az vm show \
          --resource-group python-audio-to-text-rg \
          --name audio-transcription-vm \
          --show-details \
          --query publicIps \
          --output tsv)
        echo "vm-ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "VM IP: $VM_IP"
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Check VM status
      run: |
        echo "🔍 Verificando estado de la VM..."
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-ip.outputs.vm-ip }} "
          echo '📊 Estado del sistema:'
          echo '🖥️ CPU:'
          top -bn1 | grep 'Cpu(s)' | awk '{print \$2}' | cut -d'%' -f1
          echo ''
          echo '💾 RAM:'
          free -h | awk '/^Mem:/ {print \$3 \"/\" \$2}'
          echo ''
          echo '🎮 GPU:'
          nvidia-smi --query-gpu=utilization.gpu,memory.used,memory.total --format=csv,noheader,nounits || echo 'GPU no disponible'
          echo ''
          echo '🐳 Docker:'
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          echo ''
          echo '📁 Espacio en disco:'
          df -h | grep -E '^/dev/'
        "
    
    - name: Check processing status
      run: |
        echo "📈 Verificando estado del procesamiento..."
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-ip.outputs.vm-ip }} "
          echo '📊 Estadísticas de procesamiento:'
          echo '📁 Archivos de audio:'
          find /home/azureuser/python-audio-to-text/audios -name '*.mp3' | wc -l
          echo '📝 Archivos de transcripción:'
          find /home/azureuser/python-audio-to-text/textos -name '*.txt' | wc -l
          echo ''
          echo '📋 Logs recientes:'
          tail -n 20 /home/azureuser/python-audio-to-text/logs/*.log 2>/dev/null || echo 'No hay logs disponibles'
        "
    
    - name: Check for errors
      run: |
        echo "🚨 Verificando errores..."
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-ip.outputs.vm-ip }} "
          echo '🔍 Verificando errores en logs:'
          grep -i 'error\|failed\|exception' /home/azureuser/python-audio-to-text/logs/*.log 2>/dev/null || echo 'No se encontraron errores'
          echo ''
          echo '🔍 Verificando estado del contenedor:'
          docker logs audio-transcription-gpu --tail 10 2>/dev/null || echo 'Contenedor no disponible'
        "
    
    - name: Generate report
      run: |
        echo "📊 Generando reporte de monitoreo..."
        ssh -o StrictHostKeyChecking=no azureuser@${{ steps.get-vm-ip.outputs.vm-ip }} "
          echo '📈 Reporte de monitoreo - $(date)'
          echo '================================'
          echo ''
          echo '🖥️ Recursos del sistema:'
          echo 'CPU: \$(top -bn1 | grep 'Cpu(s)' | awk '{print \$2}' | cut -d'%' -f1)%'
          echo 'RAM: \$(free -h | awk '/^Mem:/ {print \$3 \"/\" \$2}')'
          echo 'GPU: \$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)%'
          echo ''
          echo '📁 Archivos procesados:'
          echo 'Audios: \$(find /home/azureuser/python-audio-to-text/audios -name '*.mp3' | wc -l)'
          echo 'Transcripciones: \$(find /home/azureuser/python-audio-to-text/textos -name '*.txt' | wc -l)'
          echo ''
          echo '🐳 Estado Docker:'
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
        " > monitoring-report.txt
        
        echo "📋 Reporte generado:"
        cat monitoring-report.txt
